summarise(Wins = sum(Win)
,GamesPlayed = n()
,WinPercent = sum(Win) / n())
SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1)
TopPlayer <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(Player) %>%
as.character()
SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n())
SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
bottom_n(WinPercent ,n = 1) %>%
select(WinPercent) %>%
as.numeric()
SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = -1) %>%
select(WinPercent) %>%
as.numeric()
SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(WinPercent) %>%
as.numeric()
TopWinPercent <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(WinPercent) %>%
as.numeric()
BottomWinPercent <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = -1) %>%
select(WinPercent) %>%
as.numeric()
SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n())
WinPercentData <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n())
?valueBox
SmashData %>%
group_by(Player) %>%
summarise(WinPercent = scales::percent(sum(Win) / n()))
WinPercentData <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = scales::percent(sum(Win) / n()))
SmashData
SmashData %>%
filter(Player == "RoBert") %>%
group_by(Opponent) %>%
summarise(sum(WinPercent = sum(Win) / n()))
SmashData %>%
filter(Player == "RoBert") %>%
group_by(OpponentCharacter) %>%
summarise(sum(WinPercent = sum(Win) / n()))
SmashData %>%
filter(Player == "RoBert") %>%
summarise(LongestWinStreak2 = max(rle(Win == 1)[[1]][rle(Win == 1)[[2]] == 1])) %>%
as.numeric()
SmashData %>%
filter(Player == "Matt") %>%
summarise(LongestWinStreak2 = max(rle(Win == 1)[[1]][rle(Win == 1)[[2]] == 1])) %>%
as.numeric()
SmashData %>%
filter(Player == "Mikael") %>%
summarise(LongestWinStreak2 = max(rle(Win == 1)[[1]][rle(Win == 1)[[2]] == 1])) %>%
as.numeric()
SmashData %>%
filter(Player == "RoBert") %>%
summarise(GamePlayed = n())
SmashData %>%
filter(Player == "Matt") %>%
select(Win) %>%
summarise(Current = ifelse(rle(Win)$values[length(rle(Win)$values)] == 0 ,0 ,rle(Win)$lengths[length(rle(Win)$lengths)])) %>%
as.numeric()
SmashData %>%
filter(Player == "Mikael") %>%
summarise(LongestLoseStreak2 = max(rle(OpponentWin == 1)[[1]][rle(OpponentWin == 1)[[2]] == 1])) %>%
as.numeric()
?floot
?floor
SmashData %>%
filter(Player == "RoBert") %>%
group_by(OpponentCharacter) %>%
summarise(WinPercent = sum(WinPercent = sum(Win) / n()))
WinPercentData <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = scales::percent(sum(Win) / n())
,WinPercentUnformatted = sum(Win) / n())
SmashData %>%
left_join(WinPercentData %>% select(Player ,WinPercentUnformatted) ,by = "Player") %>%
filter(Player == "RoBert") %>%
group_by(OpponentCharacter) %>%
summarise(WinPercent = sum(WinPercent = sum(Win) / n()))
SmashData %>%
left_join(WinPercentData %>% select(Player ,WinPercentUnformatted) ,by = "Player") %>%
filter(Player == "RoBert") %>%
group_by(OpponentCharacter) %>%
summarise(WinPercent = sum(WinPercent = sum(Win) / n())
,AvgWinPercent = mean(WinPercentUnformatted))
SmashData %>%
filter(Player == "RoBert") %>%
group_by(Player ,OpponentCharacter) %>%
summarise(WinPercent = sum(WinPercent = sum(Win) / n())) %>%
left_join(WinPercentData %>% select(Player ,WinPercentUnformatted) ,by = "Player")
WinPercentData <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = scales::percent(sum(Win) / n())
,WinPercentUnformatted = scales::percent(sum(Win) / n()))
SmashData %>%
filter(Player == "RoBert") %>%
group_by(Player ,OpponentCharacter) %>%
summarise(WinPercent = sum(WinPercent = sum(Win) / n())) %>%
left_join(WinPercentData %>% select(Player ,WinPercentUnformatted) ,by = "Player") %>%
select(WinPercentUnformatted)
SmashData %>%
filter(Player == "RoBert") %>%
group_by(Player ,OpponentCharacter) %>%
summarise(WinPercent = sum(WinPercent = sum(Win) / n())) %>%
left_join(WinPercentData %>% select(Player ,WinPercentUnformatted) ,by = "Player") %>%
ungroup() %>%
select(WinPercentUnformatted)
SmashData %>%
filter(Player == "RoBert") %>%
group_by(Player ,OpponentCharacter) %>%
summarise(WinPercent = sum(WinPercent = sum(Win) / n())) %>%
left_join(WinPercentData %>% select(Player ,WinPercentUnformatted) ,by = "Player") %>%
ungroup() %>%
select(WinPercentUnformatted) %>%
unique()
SmashData %>%
filter(Player == "RoBert") %>%
group_by(Player ,OpponentCharacter) %>%
summarise(WinPercent = sum(WinPercent = sum(Win) / n())) %>%
left_join(WinPercentData %>% select(Player ,WinPercentUnformatted) ,by = "Player") %>%
ungroup() %>%
select(WinPercentUnformatted) %>%
unique() %>%
as.numeric()
SmashData %>%
filter(Player == "RoBert") %>%
group_by(Player ,OpponentCharacter) %>%
summarise(WinPercent = sum(WinPercent = sum(Win) / n())) %>%
left_join(WinPercentData %>% select(Player ,WinPercentUnformatted) ,by = "Player") %>%
ungroup() %>%
select(WinPercentUnformatted) %>%
unique()
WinPercentData <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = scales::percent(sum(Win) / n())
,WinPercentUnformatted = sum(Win) / n())
SmashData %>%
filter(Player == "RoBert") %>%
group_by(Player ,OpponentCharacter) %>%
summarise(WinPercent = sum(WinPercent = sum(Win) / n())) %>%
left_join(WinPercentData %>% select(Player ,WinPercentUnformatted) ,by = "Player") %>%
ungroup() %>%
select(WinPercentUnformatted) %>%
unique() %>%
as.numeric()
SmashData %>%
filter(Player == input$PlayerInput) %>%
group_by(Player ,OpponentCharacter) %>%
summarise(WinPercent = sum(WinPercent = sum(Win) / n())) %>%
left_join(WinPercentData %>% select(Player ,WinPercentUnformatted) ,by = "Player") %>%
ungroup() %>%
select(WinPercentUnformatted) %>%
unique() %>%
as.numeric()
SmashData %>%
filter(Player == "Matt") %>%
group_by(Player ,OpponentCharacter) %>%
summarise(WinPercent = sum(WinPercent = sum(Win) / n())) %>%
left_join(WinPercentData %>% select(Player ,WinPercentUnformatted) ,by = "Player") %>%
ungroup() %>%
select(WinPercentUnformatted) %>%
unique() %>%
as.numeric()
SmashData %>%
filter(Player == "Matt") %>%
group_by(Player ,OpponentCharacter) %>%
summarise(WinPercent = sum(WinPercent = sum(Win) / n())) %>%
left_join(WinPercentData %>% select(Player ,WinPercentUnformatted) ,by = "Player")
WinPercentData
WinPercentData
SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(WinPercent) %>%
as.numeric() %>%
floor()
SmashData %>%
group_by(Player) %>%
summarise(AvgDamageGiven = mean(DamageGiven))
DamageGivenByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgDamageGiven = mean(DamageGiven))
DamageGivenByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgDamageGiven = mean(DamageGiven))
ggplot(DamageGivenByPlayer ,aes(x = reorder(Player ,DamageGiven ,function(x) {x}) ,y = DamageGiven)) +
geom_col() +
coord_flip() +
scale_y_continuous(labels = scales::comma) +
# ggtitle("Points by Player") +
# theme(plot.title = element_text(hjust = 0.5)) +
labs(x = "Player") +
# scale_fill_gradientn(colors = c("darkred", "tomato1","palegreen", "darkgreen") ,limit = c(0 ,MaxWeeksAsKing)) +
# scale_fill_brewer(palette = "Set1") +
theme_fivethirtyeight()
SmashData %>%
group_by(Player) %>%
summarise(AvgDamageGiven = mean(DamageGiven))
DamageGivenByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgDamageGiven = mean(DamageGiven))
DamageGivenByPlayer
DamageGivenByPlayer
ggplot(DamageGivenByPlayer ,aes(x = reorder(Player ,AvgDamageGiven ,function(x) {x}) ,y = AvgDamageGiven)) +
geom_col() +
coord_flip() +
scale_y_continuous(labels = scales::comma) +
# ggtitle("Points by Player") +
# theme(plot.title = element_text(hjust = 0.5)) +
labs(x = "Player") +
# scale_fill_gradientn(colors = c("darkred", "tomato1","palegreen", "darkgreen") ,limit = c(0 ,MaxWeeksAsKing)) +
# scale_fill_brewer(palette = "Set1") +
theme_fivethirtyeight()
ggplot(DamageGivenByPlayer ,aes(x = reorder(Player ,AvgDamageGiven ,function(x) {x}) ,y = AvgDamageGiven)) +
geom_col() +
coord_flip() +
scale_y_continuous(labels = scales::comma) +
# ggtitle("Points by Player") +
# theme(plot.title = element_text(hjust = 0.5)) +
labs(x = "Player") +
# scale_fill_gradientn(colors = c("darkred", "tomato1","palegreen", "darkgreen") ,limit = c(0 ,MaxWeeksAsKing)) +
# scale_fill_brewer(palette = "Set1") +
theme_fivethirtyeight()
SmashData %>%
group_by(Player) %>%
summarise(AvgKosGiven = mean(KO))
KosByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgKos = mean(KO))
KosByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgKos = mean(KO))
ggplot(KosByPlayer ,aes(x = reorder(Player ,AvgKos ,function(x) {x}) ,y = AvgKos)) +
geom_col() +
coord_flip() +
scale_y_continuous(limits = c(0 ,1) ,labels = scales::commas) +
# ggtitle("Points by Player") +
# theme(plot.title = element_text(hjust = 0.5)) +
labs(x = "Player") +
# scale_fill_gradientn(colors = c("darkred", "tomato1","palegreen", "darkgreen") ,limit = c(0 ,MaxWeeksAsKing)) +
# scale_fill_brewer(palette = "Set1") +
theme_fivethirtyeight()
SmashData %>%
group_by(Player) %>%
summarise(AvgKos = mean(KO))
ggplot(KosByPlayer ,aes(x = reorder(Player ,AvgKos ,function(x) {x}) ,y = AvgKos)) +
geom_col() +
coord_flip() +
scale_y_continuous(limits = c(0 ,1) ,labels = scales::comma) +
# ggtitle("Points by Player") +
# theme(plot.title = element_text(hjust = 0.5)) +
labs(x = "Player") +
# scale_fill_gradientn(colors = c("darkred", "tomato1","palegreen", "darkgreen") ,limit = c(0 ,MaxWeeksAsKing)) +
# scale_fill_brewer(palette = "Set1") +
theme_fivethirtyeight()
ggplot(KosByPlayer ,aes(x = reorder(Player ,AvgKos ,function(x) {x}) ,y = AvgKos)) +
geom_col() +
coord_flip() +
scale_y_continuous(labels = scales::comma) +
# ggtitle("Points by Player") +
# theme(plot.title = element_text(hjust = 0.5)) +
labs(x = "Player") +
# scale_fill_gradientn(colors = c("darkred", "tomato1","palegreen", "darkgreen") ,limit = c(0 ,MaxWeeksAsKing)) +
# scale_fill_brewer(palette = "Set1") +
theme_fivethirtyeight()
SmashData %>%
group_by(Player ,Character) %>%
summarise(WinPercent = sum(Win) / n())
WinPercentByCharacter <- SmashData %>%
group_by(Player ,Character) %>%
summarise(WinPercent = sum(Win) / n())
SmashData %>%
group_by(Player) %>%
summarise(AvgDamageGiven = mean(DamageGiven))
DamageGivenByPlayer %>%
summarise(MaxDamageGiven = max(AvgDamageGiven)) %>%
as.numeric()
TopDamageGiven <- DamageGivenByPlayer %>%
summarise(MaxDamageGiven = max(AvgDamageGiven)) %>%
as.numeric()
BottomDamageGiven <- DamageGivenByPlayer %>%
summarise(MaxDamageGiven = min(AvgDamageGiven)) %>%
as.numeric()
SmashData %>%
group_by(Player ,Character) %>%
summarise(WinPercent = sum(Win) / n())
SmashData %>%
group_by(Player ,Character) %>%
summarise(AvgDamageGiven = mean(DamageGiven))
DamageGivenByCharacter <- SmashData %>%
group_by(Player ,Character) %>%
summarise(AvgDamageGiven = mean(DamageGiven))
KosByPlayer
KosByPlayer %>%
summarise(MaxKos = max(AvgKos))
MaxKos <- KosByPlayer %>%
summarise(MaxKos = max(AvgKos)) %>%
as.numeric()
KosByPlayer
SmashData
KosByPlayer
KosByPlayer %>%
summarise(MinKos = min(AvgKos)) %>%
as.numeric()
MinKos <- KosByPlayer %>%
summarise(MinKos = min(AvgKos)) %>%
as.numeric()
?round
SmashData %>%
group_by(Player ,Character) %>%
summarise(AvgDamageGivenByCharacter = mean(DamageGiven))
## Read in data
RawSmashData <- readxl::read_excel("SSBU Code.xlsx")
## Reset point
SmashData <- RawSmashData
## Filtering out extra columns to the right
SmashData <- SmashData %>%
select(Game:DamageGiven)
## Adding in an Opponent Character Column
SmashData <- SmashData %>%
left_join(SmashData ,by = c("Game" ,"Date" ,"Opponent" = "Player"))
## Adjusting the column names after the join
colnames(SmashData) <- c("Game" ,"Date" ,"Player" ,"Opponent" ,"Character" ,"Win" ,"KO" ,"DamageGiven" ,"Player2" ,"OpponentCharacter" ,"OpponentWin" ,"OpponentKO" ,"OpponentDamageGiven")
## Removing unnecessary Player2 column & re-ordering columns
SmashData <- SmashData %>%
select(Game:Player ,Character:DamageGiven ,Opponent ,OpponentCharacter:OpponentDamageGiven)
## Fixing my name
SmashData <- SmashData %>%
mutate(Player = ifelse(Player == "Robert" ,"RoBert" ,Player)
,Opponent = ifelse(Opponent == "Robert" ,"RoBert" ,Opponent))
## Getting list of Players
PlayerNames <- SmashData %>%
select(Player) %>%
unique()
## Getting Player with Best Win Percent
TopPlayer <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(Player) %>%
as.character()
TopWinPercent <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(WinPercent) %>%
as.numeric()
BottomWinPercent <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = -1) %>%
select(WinPercent) %>%
as.numeric()
## Getting Win Percent data by player
WinPercentData <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = scales::percent(sum(Win) / n())
,WinPercentUnformatted = sum(Win) / n())
## Avg Stats by Player
DamageGivenByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgDamageGiven = mean(DamageGiven))
KosByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgKos = mean(KO))
SmashData %>%
group_by(Player ,Character) %>%
summarise(AvgDamageGivenByCharacter = mean(DamageGiven))
SmashData
RawSmashData <- readxl::read_excel("SSBU Code.xlsx")
ls()
file.path()
readxl::read_excel("SSBU Code.xlsx")
setwd("C:\Users\riese\Desktop\SmashBros")
setwd("C:\\Users\\riese\\Desktop\\SmashBros")
setwd("C:/Users/riese/Desktop/SmashBros")
setwd("C:/Users/riese/Desktop/SmashBros")
RawSmashData <- readxl::read_excel("SSBU Code.xlsx")
get.files()
file.path()
list.files()
## Read in data
RawSmashData <- readxl::read_excel("SSBU Code.xlsx")
## Reset point
SmashData <- RawSmashData
## Filtering out extra columns to the right
SmashData <- SmashData %>%
select(Game:DamageGiven)
## Adding in an Opponent Character Column
SmashData <- SmashData %>%
left_join(SmashData ,by = c("Game" ,"Date" ,"Opponent" = "Player"))
## Adjusting the column names after the join
colnames(SmashData) <- c("Game" ,"Date" ,"Player" ,"Opponent" ,"Character" ,"Win" ,"KO" ,"DamageGiven" ,"Player2" ,"OpponentCharacter" ,"OpponentWin" ,"OpponentKO" ,"OpponentDamageGiven")
## Removing unnecessary Player2 column & re-ordering columns
SmashData <- SmashData %>%
select(Game:Player ,Character:DamageGiven ,Opponent ,OpponentCharacter:OpponentDamageGiven)
## Fixing my name
SmashData <- SmashData %>%
mutate(Player = ifelse(Player == "Robert" ,"RoBert" ,Player)
,Opponent = ifelse(Opponent == "Robert" ,"RoBert" ,Opponent))
## Getting list of Players
PlayerNames <- SmashData %>%
select(Player) %>%
unique()
## Getting Player with Best Win Percent
TopPlayer <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(Player) %>%
as.character()
TopWinPercent <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(WinPercent) %>%
as.numeric()
BottomWinPercent <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = -1) %>%
select(WinPercent) %>%
as.numeric()
## Getting Win Percent data by player
WinPercentData <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = scales::percent(sum(Win) / n())
,WinPercentUnformatted = sum(Win) / n())
## Avg Stats by Player
DamageGivenByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgDamageGiven = mean(DamageGiven))
KosByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgKos = mean(KO))
SmashData %>%
group_by(Player ,Character) %>%
summarise(AvgDamageGivenByCharacter = mean(DamageGiven))
TopDamageGivenByCharacter <- DamageGivenByCharacter %>%
summarise(MaxDamageGivenByCharacter = max(AvgDamageGivenByCharacter)) %>%
as.numeric()
TopDamageGivenByCharacter <- DamageGivenByCharacter %>%
summarise(MaxDamageGivenByCharacter = max(AvgDamageGivenByCharacter)) %>%
select(MaxDamageGivenByCharacter) %>%
as.numeric()
DamageGivenByCharacter %>%
summarise(MaxDamageGivenByCharacter = max(AvgDamageGivenByCharacter)) %>%
select(MaxDamageGivenByCharacter) %>%
as.numeric()
DamageGivenByCharacter %>%
summarise(MaxDamageGivenByCharacter = max(AvgDamageGivenByCharacter))
DamageGivenByCharacter
DamageGivenByCharacter <- SmashData %>%
group_by(Player ,Character) %>%
summarise(AvgDamageGivenByCharacter = mean(DamageGiven))
DamageGivenByCharacter
DamageGivenByCharacter %>%
summarise(MaxDamageGivenByCharacter = max(AvgDamageGivenByCharacter)) %>%
select(MaxDamageGivenByCharacter) %>%
as.numeric()
DamageGivenByCharacter %>%
summarise(MaxDamageGivenByCharacter = max(AvgDamageGivenByCharacter)) %>%
select(MaxDamageGivenByCharacter)
DamageGivenByCharacter %>%
ungroup() %>%
summarise(MaxDamageGivenByCharacter = max(AvgDamageGivenByCharacter)) %>%
select(MaxDamageGivenByCharacter) %>%
as.numeric()
KosByPlayer
KosByCharacter
KosByCharacter <- SmashData %>%
group_by(Player ,Character) %>%
summarise(AvgKosByCharacter = mean(KO))
KosByCharacter
KosByCharacter %>%
ungroup() %>%
summarise(MinKos = min(AvgKosByCharacter)) %>%
as.numeric()
MinKosByCharacter <- KosByCharacter %>%
ungroup() %>%
summarise(MinKos = min(AvgKosByCharacter)) %>%
as.numeric()
SmashData
