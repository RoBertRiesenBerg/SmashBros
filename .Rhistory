,RoBert = round(sum(RoBertPlusMinus ,na.rm = T) / sum(RoBertGamesInclNonContest ,na.rm = T) ,3)
,Tim = round(sum(TimPlusMinus ,na.rm = T) / sum(TimGamesInclNonContest ,na.rm = T) ,3)) %>%
gather(key = "Teammate" ,value = "PlusMinus" ,Alex:Tim) %>%
filter(Teammate != Player) %>%
arrange(Player ,desc(PlusMinus))
TeammateData %>%
# filter(Player == "Ben" & PhilTeammate == 1) %>%
group_by(Player) %>%
summarise(Alex = round(sum(AlexPlusMinus ,na.rm = T) / sum(AlexGamesInclNonContest ,na.rm = T) ,3)
,Andy = round(sum(AndyPlusMinus ,na.rm = T) / sum(AndyGamesInclNonContest ,na.rm = T) ,3)
,Ben = round(sum(BenPlusMinus ,na.rm = T) / sum(BenGamesInclNonContest ,na.rm = T) ,3)
,Evan = round(sum(EvanPlusMinus ,na.rm = T) / sum(EvanGamesInclNonContest ,na.rm = T) ,3)
,Jeff = round(sum(JeffPlusMinus ,na.rm = T) / sum(JeffGamesInclNonContest ,na.rm = T) ,3)
,Phil = round(sum(PhilPlusMinus ,na.rm = T) / sum(PhilGamesInclNonContest ,na.rm = T) ,3)
,RoBert = round(sum(RoBertPlusMinus ,na.rm = T) / sum(RoBertGamesInclNonContest ,na.rm = T) ,3)
,Tim = round(sum(TimPlusMinus ,na.rm = T) / sum(TimGamesInclNonContest ,na.rm = T) ,3)) %>%
gather(key = "Teammate" ,value = "PlusMinus" ,Alex:Tim) %>%
filter(Teammate != Player) %>%
arrange(Player ,desc(PlusMinus))
TeammateData %>%
# filter(Player == "Ben" & PhilTeammate == 1) %>%
group_by(Player) %>%
summarise(Alex = round(sum(AlexPlusMinus ,na.rm = T) / sum(AlexGamesInclNonContest ,na.rm = T) ,3)
,Andy = round(sum(AndyPlusMinus ,na.rm = T) / sum(AndyGamesInclNonContest ,na.rm = T) ,3)
,Ben = round(sum(BenPlusMinus ,na.rm = T) / sum(BenGamesInclNonContest ,na.rm = T) ,3)
,Evan = round(sum(EvanPlusMinus ,na.rm = T) / sum(EvanGamesInclNonContest ,na.rm = T) ,3)
,Jeff = round(sum(JeffPlusMinus ,na.rm = T) / sum(JeffGamesInclNonContest ,na.rm = T) ,3)
,Phil = round(sum(PhilPlusMinus ,na.rm = T) / sum(PhilGamesInclNonContest ,na.rm = T) ,3)
,RoBert = round(sum(RoBertPlusMinus ,na.rm = T) / sum(RoBertGamesInclNonContest ,na.rm = T) ,3)
,Tim = round(sum(TimPlusMinus ,na.rm = T) / sum(TimGamesInclNonContest ,na.rm = T) ,3)) %>%
gather(key = "Teammate" ,value = "PlusMinus" ,Alex:Tim) %>%
filter(Teammate != Player) %>%
arrange(Player ,desc(PlusMinus)) %>%
filter(Player == "Ben")
MaxTeammatePlusMinus <- PlusMinusByTeammate %>%
ungroup() %>%
summarise(max(PlusMinus)) %>%
as.numeric()
MinTeammatePlusMinus <- PlusMinusByTeammate %>%
ungroup() %>%
summarise(min(PlusMinus)) %>%
as.numeric()
getwd()
getwd()
library(flexdashboard)
library(tidyverse)
library(gridExtra)
library(ggthemes)
library(scales)
library(zoo)
library(knitr)
library(kableExtra)
library(RColorBrewer)
library(toOrdinal)
library(shiny)
library(DT)
library(rsconnect)
rsconnect::setAccountInfo(name='robdaslob',
token='77DFD7FDDE2622091A2CE41C3C40620B',
secret='galxFmxQG+p05eH2jL11TafNmPbw7K2Wc7Zo3Egi')
## Read in data
RawBasketballData <- readxl::read_excel("C:\\Users\\riese\\Desktop\\Basketball\\Basketball Stats.xlsx")
## Reset point
BasketballData <- RawBasketballData
## Filtering out extra rows at bottom
BasketballData <- BasketballData %>%
filter(!is.na(GameNumber))
## Ben was injured and could not continue on 2018-11-10, Game # 17
## Game counts toward Plus Minus but not toward win loss record
NonContestDateAndGameNumber <- c("2018-11-10 - 17")
## Getting the teammate dataset ready
ScoringData <- BasketballData %>%
mutate(Id = c(1:nrow(BasketballData))) %>%
select(Id, GameNumber:PointsFor) %>%
spread(key = Player ,value = PointsFor) %>%
group_by(GameNumber) %>%
summarise(Alex = sum(Alex ,na.rm = T)
,Andy = sum(Andy ,na.rm = T)
,Ben = sum(Ben ,na.rm = T)
,Evan = sum(Evan ,na.rm = T)
,Jeff = sum(Jeff ,na.rm = T)
,Phil = sum(Phil ,na.rm = T)
,RoBert = sum(RoBert ,na.rm = T)
,Tim = sum(Tim ,na.rm = T)) %>%
ungroup()
TeammateData <- BasketballData %>%
left_join(ScoringData ,by = "GameNumber") %>%
mutate(PlusMinus = PointsFor - PointsAgainst
,DateAndGameNumber = str_c(as.Date(Date) ,' - ' ,GameNumber)
,Win = ifelse(DateAndGameNumber %in% NonContestDateAndGameNumber ,0 ,as.integer(PointsFor > PointsAgainst))
,Loss = ifelse(DateAndGameNumber %in% NonContestDateAndGameNumber ,0 ,as.integer(PointsFor < PointsAgainst))
,GameCount = ifelse(DateAndGameNumber %in% NonContestDateAndGameNumber ,0 ,1)
,AlexTeammate = ifelse(PointsFor == Alex ,1 ,0)
,AndyTeammate = ifelse(PointsFor == Andy ,1 ,0)
,BenTeammate = ifelse(PointsFor == Ben ,1 ,0)
,EvanTeammate = ifelse(PointsFor == Evan ,1 ,0)
,JeffTeammate = ifelse(PointsFor == Jeff ,1 ,0)
,PhilTeammate = ifelse(PointsFor == Phil ,1 ,0)
,RoBertTeammate = ifelse(PointsFor == RoBert ,1 ,0)
,TimTeammate= ifelse(PointsFor == Tim ,1 ,0)
,AlexWins = ifelse(PointsFor == Alex & Win == 1 ,1 ,0)
,AndyWins = ifelse(PointsFor == Andy & Win == 1 ,1 ,0)
,BenWins = ifelse(PointsFor == Ben & Win == 1 ,1 ,0)
,EvanWins = ifelse(PointsFor == Evan & Win == 1 ,1 ,0)
,JeffWins = ifelse(PointsFor == Jeff & Win == 1 ,1 ,0)
,PhilWins = ifelse(PointsFor == Phil & Win == 1 ,1 ,0)
,RoBertWins = ifelse(PointsFor == RoBert & Win == 1 ,1 ,0)
,TimWins= ifelse(PointsFor == Tim & Win == 1 ,1 ,0)
,AlexPlusMinus = ifelse(PointsFor == Alex ,PlusMinus ,0)
,AndyPlusMinus = ifelse(PointsFor == Andy ,PlusMinus ,0)
,BenPlusMinus = ifelse(PointsFor == Ben ,PlusMinus ,0)
,EvanPlusMinus = ifelse(PointsFor == Evan ,PlusMinus ,0)
,JeffPlusMinus = ifelse(PointsFor == Jeff ,PlusMinus ,0)
,PhilPlusMinus = ifelse(PointsFor == Phil ,PlusMinus ,0)
,RoBertPlusMinus = ifelse(PointsFor == RoBert ,PlusMinus ,0)
,TimPlusMinus= ifelse(PointsFor == Tim ,PlusMinus ,0)
,AlexGamesInclNonContest = ifelse(PointsFor == Alex ,1 ,0)
,AndyGamesInclNonContest = ifelse(PointsFor == Andy ,1 ,0)
,BenGamesInclNonContest = ifelse(PointsFor == Ben ,1 ,0)
,EvanGamesInclNonContest = ifelse(PointsFor == Evan ,1 ,0)
,JeffGamesInclNonContest = ifelse(PointsFor == Jeff ,1 ,0)
,PhilGamesInclNonContest = ifelse(PointsFor == Phil ,1 ,0)
,RoBertGamesInclNonContest = ifelse(PointsFor == RoBert ,1 ,0)
,TimGamesInclNonContest= ifelse(PointsFor == Tim ,1 ,0)
,AlexGames = ifelse(PointsFor == Alex & GameCount == 1 ,1 ,0)
,AndyGames = ifelse(PointsFor == Andy & GameCount == 1 ,1 ,0)
,BenGames = ifelse(PointsFor == Ben & GameCount == 1 ,1 ,0)
,EvanGames = ifelse(PointsFor == Evan & GameCount == 1 ,1 ,0)
,JeffGames = ifelse(PointsFor == Jeff & GameCount == 1 ,1 ,0)
,PhilGames = ifelse(PointsFor == Phil & GameCount == 1 ,1 ,0)
,RoBertGames = ifelse(PointsFor == RoBert & GameCount == 1 ,1 ,0)
,TimGames= ifelse(PointsFor == Tim & GameCount == 1 ,1 ,0)
) %>%
select(GameNumber:PointsAgainst ,PlusMinus:TimGames)
## Getting the teammate games data into the necessary format for a chart
TeammateChartData <- TeammateData %>%
group_by(Player) %>%
summarise(Alex = sum(AlexTeammate ,na.rm = T)
,Andy = sum(AndyTeammate ,na.rm = T)
,Ben = sum(BenTeammate ,na.rm = T)
,Evan = sum(EvanTeammate ,na.rm = T)
,Jeff = sum(JeffTeammate ,na.rm = T)
,Phil = sum(PhilTeammate ,na.rm = T)
,RoBert = sum(RoBertTeammate ,na.rm = T)
,Tim = sum(TimTeammate ,na.rm = T)) %>%
gather(key = "Teammate" ,value = "Games" ,Alex:Tim) %>%
filter(Teammate != Player) %>%
arrange(Player ,desc(Games))
## Getting list of Players
PlayerNames <- TeammateChartData %>%
select(Player) %>%
unique()
## Getting Player with best Plus Minus
TopPlusMinusPlayer <- TeammateData %>%
group_by(Player) %>%
summarise(PlusMinus = sum(PlusMinus ,na.rm = T)) %>%
top_n(1 ,wt = PlusMinus) %>%
select(Player) %>%
as.character()
## Get the Plus Minus for all players
PlusMinusData <- TeammateData %>%
group_by(Player) %>%
summarise(PlusMinus = sum(PlusMinus ,na.rm = T))
## Get the Win Percent for all players
WinPercentData <- TeammateData %>%
group_by(Player) %>%
summarise(Alex = round(sum(AlexWins ,na.rm = T) / sum(AlexGames ,na.rm = T) ,3)
,Andy = round(sum(AndyWins ,na.rm = T) / sum(AndyGames ,na.rm = T) ,3)
,Ben = round(sum(BenWins ,na.rm = T) / sum(BenGames ,na.rm = T) ,3)
,Evan = round(sum(EvanWins ,na.rm = T) / sum(EvanGames ,na.rm = T) ,3)
,Jeff = round(sum(JeffWins ,na.rm = T) / sum(JeffGames ,na.rm = T) ,3)
,Phil = round(sum(PhilWins ,na.rm = T) / sum(PhilGames ,na.rm = T) ,3)
,RoBert = round(sum(RoBertWins ,na.rm = T) / sum(RoBertGames ,na.rm = T) ,3)
,Tim = round(sum(TimWins ,na.rm = T) / sum(TimGames ,na.rm = T) ,3)) %>%
gather(key = "Teammate" ,value = "WinPercent" ,Alex:Tim) %>%
filter(Teammate != Player) %>%
arrange(Player ,desc(WinPercent))
## Get the Win Percent by Player
WinPercentByPlayer <- TeammateData %>%
group_by(Player) %>%
summarise(PlayerWinPercent = round(sum(Win ,na.rm = T) / sum(GameCount ,na.rm = T) ,3))
## Get cumulative Plus Minus Data by Player
CumulativePlusMinusData <- TeammateData %>%
group_by(Player) %>%
mutate(CumSum = cumsum(PlusMinus))
## Getting max & min plus minus across all players for chart
MaxCumulativePlusMinus <- CumulativePlusMinusData %>%
ungroup() %>%
summarise(max(CumSum)) %>%
as.integer()
MinCumulativePlusMinus <- CumulativePlusMinusData %>%
ungroup() %>%
summarise(min(CumSum)) %>%
as.integer()
## Getting the Plus Minus per 4 games by Teammate
PlusMinusByTeammate <- TeammateData %>%
group_by(Player) %>%
summarise(Alex = round(sum(AlexPlusMinus ,na.rm = T) / sum(AlexGamesInclNonContest ,na.rm = T) ,3)
,Andy = round(sum(AndyPlusMinus ,na.rm = T) / sum(AndyGamesInclNonContest ,na.rm = T) ,3)
,Ben = round(sum(BenPlusMinus ,na.rm = T) / sum(BenGamesInclNonContest ,na.rm = T) ,3)
,Evan = round(sum(EvanPlusMinus ,na.rm = T) / sum(EvanGamesInclNonContest ,na.rm = T) ,3)
,Jeff = round(sum(JeffPlusMinus ,na.rm = T) / sum(JeffGamesInclNonContest ,na.rm = T) ,3)
,Phil = round(sum(PhilPlusMinus ,na.rm = T) / sum(PhilGamesInclNonContest ,na.rm = T) ,3)
,RoBert = round(sum(RoBertPlusMinus ,na.rm = T) / sum(RoBertGamesInclNonContest ,na.rm = T) ,3)
,Tim = round(sum(TimPlusMinus ,na.rm = T) / sum(TimGamesInclNonContest ,na.rm = T) ,3)) %>%
gather(key = "Teammate" ,value = "PlusMinus" ,Alex:Tim) %>%
filter(Teammate != Player) %>%
arrange(Player ,desc(PlusMinus))
## Getting max & min plus minus by teammate for chart
MaxTeammatePlusMinus <- PlusMinusByTeammate %>%
ungroup() %>%
summarise(max(PlusMinus)) %>%
as.numeric()
MinTeammatePlusMinus <- PlusMinusByTeammate %>%
ungroup() %>%
summarise(min(PlusMinus)) %>%
as.numeric()
WinPercent
WinPercentData
PlusMinusData
CumulativePlusMinusData
CumulativePlusMinusData
CumulativePlusMinusData %>%
summarise(max = max(CumSum)
,min = min(CumSum))
PlusMinusByTeammate
PlusMinusByTeammate %>%
filter(Player == "Tim")
WinPercentByPlayer
PlusMinusByTeammate %>%
summarise(max = max(PlusMinus)
,min = min(PlusMinus))
PlusMinusByTeammate %>%
group_by(Player) %>%
summarise(max = max(PlusMinus)
,min = min(PlusMinus))
WinPercentByPlayer
TeammateChartData
TeammateChartData %>%
group_by(Player) %>%
summarise(max = max(Games)
,min = min(Games))
PlusMinusByTeammate %>%
group_by(Player) %>%
summarise(max = max(PlusMinus)
,min = min(PlusMinus))
TeammateChartData
PlusMinusByTeammate
PlusMinusByTeammate %>%
group_by(Player) %>%
summarise(max = max(PlusMinus)
,min = min(PlusMinus))
TeammateChartData
TeammateChartData %>%
filter(Player == "Ben")
PlusMinusByTeammate %>%
group_by(Player) %>%
summarise(max = max(PlusMinus)
,min = min(PlusMinus))
CumulativePlusMinusData %>%
summarise(max = max(CumSum)
,min = min(CumSum))
install.packages(c("reshape", "MASS", "psych", "Rglpk", "XML", "data.table"), dependencies=TRUE)
install.packages(c("devtools"), dependencies=TRUE, repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
devtools::install_github(repo = "FantasyFootballAnalytics/ffanalytics", build_vignettes = TRUE)
library(devtools)
install.packages(c("devtools"), dependencies=TRUE, repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(devtools)
library("devtools")
library("ffanalytics")
SeasonYear <- lubridate::year(lubridate::today())
SeasonYear <- as.numeric(lubridate::year(lubridate::today()))
?scrape_data
RawData <- scrape_data(src = c("CBS", "ESPN", "FantasyData", "FantasyPros",
"FantasySharks", "FFToday", "FleaFlicker", "NumberFire", "Yahoo",
"FantasyFootballNerd", "NFL", "RTSports", "Walterfootball"), pos = c("QB",
"RB", "WR", "TE", "K", "DST", "DL", "LB", "DB"), season = SeasonYear, week = 0)
Test <- scrape_data(src = c("CBS", "ESPN", "Yahoo"),
pos = c("QB", "RB", "WR", "TE", "DST"),
season = SeasonYear, week = 0)
Test <- scrape_data(src = c("CBS", "ESPN", "Yahoo"),
pos = c("QB", "RB", "WR", "TE", "DST"),
season = 2019, week = 0)
Test <- scrape_data(src = c("ESPN", "Yahoo"),
pos = c("QB", "RB", "WR", "TE", "DST"),
season = 2019, week = 0)
Test <- scrape_data(src = c("ESPN", "Yahoo"),
pos = c("QB", "RB", "WR", "TE", "DST"),
season = 2018, week = 0)
scrape_data
projection_sources
library(tidyverse)
as_tibble(projection_sources)
projection_sources
scrape_data
projection_sources
projection_sources$CBS["Accessing"]
projection_sources <-
projection_sources$CBS
projection_sources
projection_sources$CBS[["Accessing:"]]
projection_sources$CBS[["Accessing"]]
projection_sources$CBS[[1]]
projection_sources$CBS[1]
class(projection_sources)
projection_sources
library(flexdashboard)
library(tidyverse)
library(gridExtra)
library(ggthemes)
library(scales)
library(zoo)
library(knitr)
library(kableExtra)
library(RColorBrewer)
library(toOrdinal)
library(shiny)
library(DT)
library(rsconnect)
library(readxl)
library("rsconnect", lib.loc="~/R/win-library/3.4")
install.packages("rsconnect")
# setwd("C:/Users/riese/Desktop/SmashBros")
## Read in data
RawSmashData <- readxl::read_excel("SSBU Code.xlsx")
## Reset point
SmashData <- RawSmashData
## Filtering out extra columns to the right
SmashData <- SmashData %>%
select(Game:DamageGiven)
## Adding in an Opponent Character Column
SmashData <- SmashData %>%
left_join(SmashData ,by = c("Game" ,"Date" ,"Opponent" = "Player"))
## Adjusting the column names after the join
colnames(SmashData) <- c("Game" ,"Date" ,"Player" ,"Opponent" ,"Character" ,"Win" ,"KO" ,"DamageGiven" ,"Player2" ,"OpponentCharacter" ,"OpponentWin" ,"OpponentKO" ,"OpponentDamageGiven")
## Removing unnecessary Player2 column & re-ordering columns
SmashData <- SmashData %>%
select(Game:Player ,Character:DamageGiven ,Opponent ,OpponentCharacter:OpponentDamageGiven)
## Fixing my name
SmashData <- SmashData %>%
mutate(Player = ifelse(Player == "Robert" ,"RoBert" ,Player)
,Opponent = ifelse(Opponent == "Robert" ,"RoBert" ,Opponent))
## Getting list of Players
PlayerNames <- SmashData %>%
select(Player) %>%
unique()
## Getting Player with Best Win Percent
TopPlayer <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(Player) %>%
as.character()
TopWinPercent <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(WinPercent) %>%
as.numeric()
BottomWinPercent <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = -1) %>%
select(WinPercent) %>%
as.numeric()
## Getting Win Percent data by player
WinPercentData <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = scales::percent(sum(Win) / n())
,WinPercentUnformatted = sum(Win) / n())
## Avg Stats by Player
DamageGivenByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgDamageGiven = mean(DamageGiven))
KosByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgKos = mean(KO))
library(flexdashboard)
library(tidyverse)
library(gridExtra)
library(ggthemes)
library(scales)
library(zoo)
library(knitr)
library(kableExtra)
library(RColorBrewer)
library(toOrdinal)
library(shiny)
library(DT)
library(rsconnect)
library(readxl)
# setwd("C:/Users/riese/Desktop/SmashBros")
## Read in data
RawSmashData <- readxl::read_excel("SSBU Code.xlsx")
## Reset point
SmashData <- RawSmashData
## Filtering out extra columns to the right
SmashData <- SmashData %>%
select(Game:DamageGiven)
## Adding in an Opponent Character Column
SmashData <- SmashData %>%
left_join(SmashData ,by = c("Game" ,"Date" ,"Opponent" = "Player"))
## Adjusting the column names after the join
colnames(SmashData) <- c("Game" ,"Date" ,"Player" ,"Opponent" ,"Character" ,"Win" ,"KO" ,"DamageGiven" ,"Player2" ,"OpponentCharacter" ,"OpponentWin" ,"OpponentKO" ,"OpponentDamageGiven")
## Removing unnecessary Player2 column & re-ordering columns
SmashData <- SmashData %>%
select(Game:Player ,Character:DamageGiven ,Opponent ,OpponentCharacter:OpponentDamageGiven)
## Fixing my name
SmashData <- SmashData %>%
mutate(Player = ifelse(Player == "Robert" ,"RoBert" ,Player)
,Opponent = ifelse(Opponent == "Robert" ,"RoBert" ,Opponent))
## Getting list of Players
PlayerNames <- SmashData %>%
select(Player) %>%
unique()
## Getting Player with Best Win Percent
TopPlayer <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(Player) %>%
as.character()
TopWinPercent <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(WinPercent) %>%
as.numeric()
BottomWinPercent <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = -1) %>%
select(WinPercent) %>%
as.numeric()
## Getting Win Percent data by player
WinPercentData <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = scales::percent(sum(Win) / n())
,WinPercentUnformatted = sum(Win) / n())
## Avg Stats by Player
DamageGivenByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgDamageGiven = mean(DamageGiven))
KosByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgKos = mean(KO))
setwd("C:/Users/riese/Desktop/SmashBros")
## Read in data
RawSmashData <- readxl::read_excel("SSBU Code.xlsx")
## Reset point
SmashData <- RawSmashData
## Filtering out extra columns to the right
SmashData <- SmashData %>%
select(Game:DamageGiven)
## Adding in an Opponent Character Column
SmashData <- SmashData %>%
left_join(SmashData ,by = c("Game" ,"Date" ,"Opponent" = "Player"))
## Adjusting the column names after the join
colnames(SmashData) <- c("Game" ,"Date" ,"Player" ,"Opponent" ,"Character" ,"Win" ,"KO" ,"DamageGiven" ,"Player2" ,"OpponentCharacter" ,"OpponentWin" ,"OpponentKO" ,"OpponentDamageGiven")
## Removing unnecessary Player2 column & re-ordering columns
SmashData <- SmashData %>%
select(Game:Player ,Character:DamageGiven ,Opponent ,OpponentCharacter:OpponentDamageGiven)
## Fixing my name
SmashData <- SmashData %>%
mutate(Player = ifelse(Player == "Robert" ,"RoBert" ,Player)
,Opponent = ifelse(Opponent == "Robert" ,"RoBert" ,Opponent))
## Getting list of Players
PlayerNames <- SmashData %>%
select(Player) %>%
unique()
## Getting Player with Best Win Percent
TopPlayer <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(Player) %>%
as.character()
TopWinPercent <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = 1) %>%
select(WinPercent) %>%
as.numeric()
BottomWinPercent <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = sum(Win) / n()) %>%
top_n(WinPercent ,n = -1) %>%
select(WinPercent) %>%
as.numeric()
## Getting Win Percent data by player
WinPercentData <- SmashData %>%
group_by(Player) %>%
summarise(WinPercent = scales::percent(sum(Win) / n())
,WinPercentUnformatted = sum(Win) / n())
## Avg Stats by Player
DamageGivenByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgDamageGiven = mean(DamageGiven))
KosByPlayer <- SmashData %>%
group_by(Player) %>%
summarise(AvgKos = mean(KO))
DamageGivenByPlayer
DamageGivenByPlayer %>%
ungroup() %>%
summarise(MaxAvgDamageGiven = max(AvgDamageGiven)) %>%
as.numeric()
MaxAvgDamageGivenByPlayer
MaxAvgDamageGivenByPlayer <- DamageGivenByPlayer %>%
ungroup() %>%
summarise(MaxAvgDamageGiven = max(AvgDamageGiven)) %>%
as.numeric()
max(c(MaxAvgDamageGivenByPlayer ,400))
